package io.hhplus.tdd.service;


import io.hhplus.tdd.domain.PointHistory;
import io.hhplus.tdd.domain.UserPoint;
import io.hhplus.tdd.repository.PointHistoryTable;
import io.hhplus.tdd.repository.UserPointTable;
import io.hhplus.tdd.service.transaction.TransactionType;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;

import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
@DirtiesContext(
        classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD
)
public class ConcurrencyPointServiceIntegrationTest {

    private static final Logger logger = LoggerFactory.getLogger(ConcurrencyPointServiceIntegrationTest.class);
    private static final String START_LOG_MSG = "Î™®Îì† Ïä§Î†àÎìú Ï§ÄÎπÑ ÏôÑÎ£å. üèÉ‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄÔ∏èüèÉ‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄÔ∏èüèÉ‚Äç";

    @Autowired
    private PointService pointService;

    @Autowired
    private UserPointTable userPointTable;
    @Autowired
    private PointHistoryTable pointHistoryTable;


    @Test
    @DisplayName("ÎèôÏùº ÏÇ¨Ïö©ÏûêÏóê ÎåÄÌïú ÎèôÏãú ÏöîÏ≤≠ÏùÄ ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏñ¥Ïïº ÌïúÎã§")
    void ten_person_charge_100L_expect_total_1000_ok() throws InterruptedException {
        // given
        long userId = 1L;
        long amount = 100L;
        TransactionType transactionType = TransactionType.CHARGE;
        long timestamp = System.currentTimeMillis();
        int threadCount = 10;

        CountDownLatch readyLatch = new CountDownLatch(threadCount);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch completionLatch = new CountDownLatch(threadCount);

        // when
        ExecutorService executorService = Executors.newFixedThreadPool(threadCount);

        IntStream.range(0, threadCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();

                    pointService.executePointTransaction(
                            userId, amount, transactionType, timestamp);
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        readyLatch.await();
        logger.info(START_LOG_MSG);

        startLatch.countDown();

        completionLatch.await();
        executorService.shutdown();

        // then
        UserPoint userPoint = userPointTable.selectById(userId);
        List<PointHistory> pointHistories = pointHistoryTable.selectAllByUserId(userId);

        assertEquals(1000L, userPoint.point(), "1Î≤à Ïú†Ï†ÄÍ∞Ä 100ÏõêÏùÑ 10Î≤à Ï∂©Ï†ÑÌï¥ÏÑú 1,000Ïõê");
        assertEquals(10, pointHistories.size(), "10Î≤à Ï∂©Ï†ÑÌï¥ÏÑú 10Í∞ú");
    }

    @Test
    @DisplayName("ÎèôÏùº ÏÇ¨Ïö©ÏûêÏóê ÎåÄÌïú Ï∂©Ï†Ñ ÌõÑ Îã§Ï§ë ÏÇ¨Ïö© ÏöîÏ≤≠ÏùÄ ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏñ¥Ïïº ÌïúÎã§")
    void init_1000_use_ten_50L_expect_500_ok() throws InterruptedException {
        // given
        long userId = 1L;
        long initialCharge = 1000L;
        long useAmount = 50L;
        int useCount = 10;

        pointService.executePointTransaction(userId, initialCharge, TransactionType.CHARGE, System.currentTimeMillis());

        CountDownLatch readyLatch = new CountDownLatch(useCount);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch completionLatch = new CountDownLatch(useCount);

        ExecutorService executorService = Executors.newFixedThreadPool(useCount);
        IntStream.range(0, useCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();
                    pointService.executePointTransaction(userId, useAmount, TransactionType.USE, System.currentTimeMillis());
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        readyLatch.await();
        logger.info(START_LOG_MSG);
        startLatch.countDown();
        completionLatch.await();
        executorService.shutdown();

        // then
        UserPoint userPoint = userPointTable.selectById(userId);
        List<PointHistory> pointHistories = pointHistoryTable.selectAllByUserId(userId);
        assertEquals(500L, userPoint.point(), "Ï¥àÍ∏∞ Ï∂©Ï†Ñ 1000Ïõê - ÏÇ¨Ïö© 50Ïõê * 10Î≤à = 500Ïõê");
        assertEquals(11, pointHistories.size(), "Ï¥àÍ∏∞ Ï∂©Ï†Ñ 1Î≤à + ÏÇ¨Ïö© 10Î≤à = 11Í∞ú");
    }

    @Test
    @DisplayName("ÎèôÏùº ÏÇ¨Ïö©ÏûêÏóê ÎåÄÌïú 50 ÎèôÏãú ÏöîÏ≤≠Ïù¥ ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏñ¥Ïïº ÌïúÎã§")
    void single_user_10000_requests_expect_correct_total() throws InterruptedException {
        // given
        long userId = 1L;
        long amount = 100L;
        TransactionType transactionType = TransactionType.CHARGE;
        int threadCount = 50;

        CountDownLatch readyLatch = new CountDownLatch(threadCount);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch completionLatch = new CountDownLatch(threadCount);

        ExecutorService executorService = Executors.newFixedThreadPool(100);

        IntStream.range(0, threadCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();

                    pointService.executePointTransaction(
                            userId, amount, transactionType, System.currentTimeMillis());
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        readyLatch.await();
        logger.info(START_LOG_MSG);

        startLatch.countDown();
        completionLatch.await();
        executorService.shutdown();

        // then
        UserPoint userPoint = userPointTable.selectById(userId);
        List<PointHistory> pointHistories = pointHistoryTable.selectAllByUserId(userId);

        assertEquals(5000L, userPoint.point());
        assertEquals(50, pointHistories.size());
    }


    @Test
    @DisplayName("ÎèôÏùº ÏÇ¨Ïö©ÏûêÍ∞Ä ÎèôÏãúÏóê Ï∂©Ï†ÑÍ≥º ÏÇ¨Ïö©ÏùÑ Ïã§ÌñâÌï† Í≤ΩÏö∞ ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏñ¥Ïïº ÌïúÎã§")
    void concurrent_charge_and_use_expect_correct_total() throws InterruptedException {
        // given
        long userId = 1L;
        long initialCharge = 1000L;
        long chargeAmount = 100L;
        long useAmount = 50L;
        int chargeCount = 25;
        int useCount = 25;
        int totalThreads = chargeCount + useCount;

        // Ï¥àÍ∏∞ 1000Ïõê Ï∂©Ï†Ñ
        pointService.executePointTransaction(userId, initialCharge, TransactionType.CHARGE, System.currentTimeMillis());

        CountDownLatch readyLatch = new CountDownLatch(totalThreads);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch completionLatch = new CountDownLatch(totalThreads);

        ExecutorService executorService = Executors.newFixedThreadPool(50);

        IntStream.range(0, chargeCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();
                    pointService.executePointTransaction(userId, chargeAmount, TransactionType.CHARGE, System.currentTimeMillis());
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        IntStream.range(0, useCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();
                    pointService.executePointTransaction(userId, useAmount, TransactionType.USE, System.currentTimeMillis());
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        readyLatch.await();
        logger.info(START_LOG_MSG);

        startLatch.countDown();
        completionLatch.await();
        executorService.shutdown();

        // then
        UserPoint userPoint = userPointTable.selectById(userId);
        List<PointHistory> pointHistories = pointHistoryTable.selectAllByUserId(userId);

        assertEquals(2250L, userPoint.point(), "Ï¥àÍ∏∞ 1000Ïõê + (100Ïõê Ï∂©Ï†Ñ * 25) - (50Ïõê ÏÇ¨Ïö© * 25) = 2250Ïõê");
        assertEquals(51, pointHistories.size(), "Ï¥àÍ∏∞ Ï∂©Ï†Ñ 1Ìöå + 50Î≤à Ìä∏ÎûúÏû≠ÏÖò = 51Í∞ú");
    }

    @Test
    @DisplayName("Ìè¨Ïù∏Ìä∏ ÌïúÎèÑ Ï¥àÍ≥º Ïãú ÏòàÏô∏Í∞Ä Î∞úÏÉùÌï¥Ïïº ÌïúÎã§")
    void charge_exceed_limit_throw_exception() throws InterruptedException {
        // given
        long userId = 1L;
        long amount = 2000L;  // 2000Ìè¨Ïù∏Ìä∏Ïî© Ï∂©Ï†Ñ
        TransactionType transactionType = TransactionType.CHARGE;
        long timestamp = System.currentTimeMillis();
        int threadCount = 10;

        CountDownLatch readyLatch = new CountDownLatch(threadCount);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch completionLatch = new CountDownLatch(threadCount);

        // when
        ExecutorService executorService = Executors.newFixedThreadPool(threadCount);
        AtomicInteger exceptionCount = new AtomicInteger(0);

        IntStream.range(0, threadCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();

                    pointService.executePointTransaction(
                            userId, amount, transactionType, timestamp);
                } catch (IllegalArgumentException e) {
                    exceptionCount.incrementAndGet();
                    assertEquals("Ï∂©Ï†Ñ ÌïúÎèÑ Ï¥àÍ≥º. ÌòÑÏû¨ Ìè¨Ïù∏Ìä∏: 10000, Ï∂©Ï†Ñ ÏãúÎèÑÎüâ: 2000, ÌïúÎèÑ: 10000", e.getMessage());
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        readyLatch.await();
        logger.info(START_LOG_MSG);

        startLatch.countDown();

        completionLatch.await();
        executorService.shutdown();

        // then
        UserPoint userPoint = userPointTable.selectById(userId);
        List<PointHistory> pointHistories = pointHistoryTable.selectAllByUserId(userId);

        assertEquals(10000L, userPoint.point(), "Ìè¨Ïù∏Ìä∏Îäî ÌïúÎèÑÏù∏ 10000ÏùÑ Ï¥àÍ≥ºÌïòÏßÄ ÏïäÏïÑÏïº Ìï®");
        assertTrue(exceptionCount.get() > 0, "ÌïúÎèÑ Ï¥àÍ≥º ÏòàÏô∏Í∞Ä Î∞úÏÉùÌï¥Ïïº Ìï®");
    }

    @Test
    @DisplayName("ÏùåÏàò Ìè¨Ïù∏Ìä∏ Ï∂©Ï†Ñ ÏãúÎèÑ Ïãú ÏòàÏô∏Í∞Ä Î∞úÏÉùÌï¥Ïïº ÌïúÎã§")
    void charge_negative_amount_throw_exception() throws InterruptedException {
        // given
        long userId = 1L;
        long amount = -100L;  // ÏùåÏàò Ìè¨Ïù∏Ìä∏ Ï∂©Ï†Ñ ÏãúÎèÑ
        TransactionType transactionType = TransactionType.CHARGE;
        long timestamp = System.currentTimeMillis();
        int threadCount = 10;

        CountDownLatch readyLatch = new CountDownLatch(threadCount);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch completionLatch = new CountDownLatch(threadCount);

        // when
        ExecutorService executorService = Executors.newFixedThreadPool(threadCount);
        AtomicInteger exceptionCount = new AtomicInteger(0);

        IntStream.range(0, threadCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();

                    pointService.executePointTransaction(
                            userId, amount, transactionType, timestamp);
                } catch (IllegalArgumentException e) {
                    exceptionCount.incrementAndGet();
                    assertEquals("Ï∂©Ï†Ñ Ìè¨Ïù∏Ìä∏Îäî ÏñëÏàòÏó¨Ïïº Ìï©ÎãàÎã§. Ï∂©Ï†Ñ ÏãúÎèÑÎüâ: -100", e.getMessage());
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        readyLatch.await();
        logger.info(START_LOG_MSG);

        startLatch.countDown();

        completionLatch.await();
        executorService.shutdown();

        // then
        UserPoint userPoint = userPointTable.selectById(userId);
        assertEquals(0L, userPoint.point(), "ÏùåÏàò Ï∂©Ï†ÑÏúºÎ°ú Ïù∏Ìï¥ Ìè¨Ïù∏Ìä∏Í∞Ä Î≥ÄÍ≤ΩÎêòÏßÄ ÏïäÏïÑÏïº Ìï®");
        assertTrue(exceptionCount.get() > 0, "ÏùåÏàò Ï∂©Ï†Ñ ÏòàÏô∏Í∞Ä Î∞úÏÉùÌï¥Ïïº Ìï®");
    }

    @Test
    @DisplayName("Ìè¨Ïù∏Ìä∏ Î∂ÄÏ°± Ïãú ÏÇ¨Ïö© ÏãúÎèÑ Ïãú ÏòàÏô∏Í∞Ä Î∞úÏÉùÌï¥Ïïº ÌïúÎã§")
    void use_insufficient_point_throw_exception() throws InterruptedException {
        // given
        long userId = 1L;
        long chargeAmount = 100L;  // Ï∂©Ï†Ñ Í∏àÏï°
        long useAmount = 1000L;    // ÏÇ¨Ïö© Í∏àÏï° (Ï∂©Ï†Ñ Í∏àÏï°Î≥¥Îã§ ÌÅº)
        long timestamp = System.currentTimeMillis();
        int threadCount = 10;

        CountDownLatch readyLatch = new CountDownLatch(threadCount);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch completionLatch = new CountDownLatch(threadCount);

        // when
        ExecutorService executorService = Executors.newFixedThreadPool(threadCount);
        AtomicInteger exceptionCount = new AtomicInteger(0);

        // Î®ºÏ†Ä Ìè¨Ïù∏Ìä∏ Ï∂©Ï†Ñ
        pointService.executePointTransaction(userId, chargeAmount, TransactionType.CHARGE, timestamp);

        IntStream.range(0, threadCount).forEach(i -> {
            executorService.submit(() -> {
                try {
                    readyLatch.countDown();
                    startLatch.await();

                    pointService.executePointTransaction(
                            userId, useAmount, TransactionType.USE, timestamp);
                } catch (RuntimeException e) {
                    exceptionCount.incrementAndGet();
                    assertEquals("Ìè¨Ïù∏Ìä∏Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.", e.getMessage());
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    completionLatch.countDown();
                }
            });
        });

        readyLatch.await();
        logger.info(START_LOG_MSG);

        startLatch.countDown();

        completionLatch.await();
        executorService.shutdown();

        // then
        UserPoint userPoint = userPointTable.selectById(userId);
        assertEquals(chargeAmount, userPoint.point(), "Ìè¨Ïù∏Ìä∏ Î∂ÄÏ°±ÏúºÎ°ú Ïù∏Ìï¥ Ìè¨Ïù∏Ìä∏Í∞Ä Î≥ÄÍ≤ΩÎêòÏßÄ ÏïäÏïÑÏïº Ìï®");
        assertTrue(exceptionCount.get() > 0, "Ìè¨Ïù∏Ìä∏ Î∂ÄÏ°± ÏòàÏô∏Í∞Ä Î∞úÏÉùÌï¥Ïïº Ìï®");
    }
}
